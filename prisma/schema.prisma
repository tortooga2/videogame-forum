// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  questions    Question[]
  answers      Answer[]
  answerVotes  AnswerVote[]
  questionVotes QuestionVote[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)


 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}


model Question {
  id        String   @id @default(cuid())
  userId  String
  title  String?
  description String?

  tagid      String  @default("0")

  upvotes   Int      @default(0)
  downvotes Int      @default(0)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionVotes QuestionVote[]
  answers   Answer[]

  poster    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagid], references: [id], onDelete: Cascade)
}

model Answer {
  id        String   @id @default(cuid())
  userId    String
  questionId String
  answer    String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)

  answerVotes AnswerVote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  poster    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

}

model AnswerVote {
  id        String   @id @default(cuid())
  userId    String
  answerId  String
  vote      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  voter     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer    Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)

}

model QuestionVote {
  id        String   @id @default(cuid())
  userId    String
  questionId String
  vote      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  voter     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

}


model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String @default("#ffffff")
  description String?

  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

